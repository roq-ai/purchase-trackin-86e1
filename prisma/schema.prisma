generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model organization {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model platform {
  id         String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String     @db.VarChar(255)
  user_id    String?    @db.Uuid
  created_at DateTime   @default(now()) @db.Timestamp(6)
  updated_at DateTime   @default(now()) @db.Timestamp(6)
  user       user?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  purchase   purchase[]
}

model purchase {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  song_id         String?   @db.Uuid
  platform_id     String?   @db.Uuid
  units_purchased Int
  purchase_date   DateTime  @db.Date
  user_id         String?   @db.Uuid
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  updated_at      DateTime  @default(now()) @db.Timestamp(6)
  platform        platform? @relation(fields: [platform_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  song            song?     @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model song {
  id         String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String     @db.VarChar(255)
  version    String     @db.VarChar(255)
  user_id    String?    @db.Uuid
  created_at DateTime   @default(now()) @db.Timestamp(6)
  updated_at DateTime   @default(now()) @db.Timestamp(6)
  purchase   purchase[]
  user       user?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  organization organization[]
  platform     platform[]
  purchase     purchase[]
  song         song[]
}
